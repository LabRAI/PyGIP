# -*- coding: utf-8 -*-
"""gnn_fingers_example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sux_oylKIr0DhvKAm0tOvKeUJT6WEPgg
"""

"""
GNNFingers Defense Examples
===========================
This example demonstrates how to run GNNFingers on different datasets and tasks.

Usage Instructions:
------------------
1. Uncomment the desired experiment in the main section
2. Run the script to execute that specific experiment

Supported Experiments:
---------------------
- Node Classification: Cora (automatic detection)
- Graph Classification: ENZYMES, PROTEINS (automatic detection)
- Graph Matching: AIDS (automatic detection)
- Link Prediction: Cora (requires manual task_type setting)

Note: Only Link Prediction requires manual task_type specification.
      All other tasks are automatically detected from dataset name.
"""

from pygip.datasets import Cora, TUDataset
from pygip.models.defense import GNNFingersDefense

def run_experiment():
    """
    Example function - change dataset and task as needed.
    """
    print("\n" + "="*70)
    print("Running: graph_classification on ENZYMES")
    print("="*70)

    try:
        # EXPERIMENT CONFIGURATIONS - Choose one:

        # 1. Node Classification (Cora) - automatic detection
        # dataset = Cora(api_type='pyg')

        # 2. Graph Classification (ENZYMES) - automatic detection
        dataset = TUDataset(name='ENZYMES', api_type='pyg')

        # 3. Graph Classification (PROTEINS) - automatic detection
        # dataset = TUDataset(name='PROTEINS', api_type='pyg')

        # 4. Graph Matching (AIDS) - automatic detection
        # dataset = TUDataset(name='AIDS', api_type='pyg')

        # 5. Link Prediction (Cora) - MANUAL task_type required
        # dataset = Cora(api_type='pyg')
        # dataset.task_type = 'link_prediction'  # Required for link prediction

        # Initialize and run defense (simple PyGIP way)
        defense = GNNFingersDefense(dataset, attack_node_fraction=0.1)
        results = defense.defend()

        # Print results
        print("\n" + "="*60)
        print("FINAL RESULTS")
        print("="*60)
        print(f"Task: {results['task']}")
        print(f"Dataset: {results['dataset']}")
        print(f"ARUC: {results['aruc']:.3f}")
        print(f"Accuracy: {results['accuracy']:.3f}")
        print(f"Robustness: {results['robustness']:.3f}")
        print(f"Uniqueness: {results['uniqueness']:.3f}")
        print("="*60)
        return results

    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    result = run_experiment()